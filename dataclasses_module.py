# Модуль dataclasses в Python надає засіб для декларативного визначення класів, які переважно використовуються для зберігання даних. 
# Цей модуль введений у Python 3.7, щоб спростити створення таких класів без необхідності ручного написання бойлерплейт 
# (від англ. - boilerplate) коду, який часто повторюється у традиційних класах.

# Модуль надає декоратор класу @dataclass який спрощує створення класів для зберігання даних. 
# Традиційно, коли ми створюємо клас для зберігання даних, нам потрібно вручну визначити метод як-от __init__() 
# для ініціалізації атрибутів, магічні методи для представлення об'єкта у зрозумілому форматі або для порівняння об'єктів.
#  
# ☝ Використання @dataclass дозволяє зменшити кількість коду, необхідного для створення класів, 
# які в основному зберігають дані. Це робить код більш читабельним і легшим для розуміння, 
# а також автоматично створює конструктор класу __init__.

# Базовий приклад синтаксису @dataclass виглядає наступним чином:
# from dataclasses import dataclass

# @dataclass
# class ExampleClass:
#     attribute1: type
#     attribute2: type = default_value


class Person:
    def __init__(self, name: str, age: int):
        self.name = name
        self.age = age

# У цьому прикладі для створення простого класу Person, який зберігає ім'я та вік особи, 
# ми визначили метод __init__ для ініціалізації атрибутів.

# Якщо використати декоратор @dataclass, ми можемо автоматизувати створення класу, значно спростивши код.
from dataclasses import dataclass

@dataclass
class Person:
    name: str
    age: int

# ☝ Перевага використання @dataclass полягає у тому, що він автоматизує багато рутинних задач, 
# пов'язаних із створенням класів, які зберігають дані.

# В наступному прикладі клас Article містить атрибути зі стандартними значеннями. 
# Це корисно, коли деякі поля мають звичайні значення, які не вимагають вказівки при кожному створенні об'єкта:

@dataclass
class Article:
    title: str
    author: str
    views: int = 0


# Розглянемо наступну задачу, щоб продемонструвати використання @dataclass у Python на конкретному прикладі. 
# Ми створимо клас Rectangle, який буде обчислювати та виводити площу різних прямокутників, заданих користувачем.

from dataclasses import dataclass

@dataclass
class Rectangle:
    width: int
    height: int

    def area(self) -> int:
        return self.width * self.height

rect1 = Rectangle(10, 5)
rect2 = Rectangle(7, 3)
rect3 = Rectangle(8, 6)

print(f"Площа прямокутника 1: {rect1.area()}")
print(f"Площа прямокутника 2: {rect2.area()}")
print(f"Площа прямокутника 3: {rect3.area()}")

# Коли ми визначаємо клас Rectangle за допомогою @dataclass, Python автоматично створює метод __init__, 
# який приймає атрибути width та height як параметри, за нас. Це означає, що нам не потрібно явно визначати конструктор класу.

