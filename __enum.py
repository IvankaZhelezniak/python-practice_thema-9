# Перелічуваний тип даних (Enumeration), часто скорочено як Enum, - це спосіб визначення набору іменованих констант 
# у мовах програмування, що дозволяє використовувати більш зрозумілі імена для цих констант замість простих числових значень. 
# 
# Enum визначає символічні імена для набору пов'язаних значень, полегшуючи читання та розуміння коду.

# Перелічення часто зустрічаються в ситуаціях, де потрібно представити обмежену кількість варіантів, таких як:
# Дні тижня
# Статуси замовлень (наприклад, "новий", "в обробці", "відправлений", "доставлений")
# Ролі чи рівні доступу в системі безпеки (наприклад ролі, “користувач”, “модератор”, “адміністратор”)


# Модуль enum в Python надає можливість для створення перелічуваних типів, які дозволяють визначати іменовані константи. 
# Ці константи можуть бути використані для покращення читабельності та надійності коду, 
# замінюючи використання неявних значень, таких як рядки або числа, на більш зрозумілі імена.

# Клас Enum з модуля enum дозволяє об'єднати ряд іменованих констант і гарантувати, 
# що об'єкти цього класу можуть приймати тільки одне з обмежених значень, які вони описують.

# Для створення перелічення використовується наслідування від класу Enum. Кожен атрибут класу представляє окремий член перелічення.

from enum import Enum

class Day(Enum):
    MONDAY = 1
    TUESDAY = 2
    WEDNESDAY = 3
    THURSDAY = 4
    FRIDAY = 5
    SATURDAY = 6
    SUNDAY = 7

# Таке визначення дозволяє використовувати Day.MONDAY, Day.TUESDAY тощо, для представлення днів тижня у вашому коді, 
# замість використання простих чисел або рядків.

# Ви можете отримати доступ до конкретного дня за допомогою його імені:
today = Day.MONDAY
print(today)  # Виведе: Day.MONDAY

# Enum члени можуть бути порівняні між собою за допомогою операторів порівняння:
if today == Day.MONDAY:
    print("Сьогодні понеділок.")
else:
    print("Сьогодні не понеділок.")

# Кожен член Enum має властивості name і value, які повертають ім'я та значення члена відповідно:
print(today.name)  
print(today.value)  


# Якщо у вас є значення і ви хочете отримати відповідний член Enum, ви можете використовувати метод Day() з цим значенням:
day_from_value = Day(1)
print(day_from_value)  # Виведе: Day.MONDAY


# приклад використання Enum, де ми створимо систему управління статусами замовлень для інтернет-магазину. 
# У цьому прикладі, Enum використовується для створення чітко визначеного набору статусів, 
# які може мати замовлення. 
# Ці статуси включають "Новий" (NEW), "В обробці" (PROCESSING), "Відправлено" (SHIPPED), та "Доставлено" (DELIVERED).

# Перш за все, нам потрібно визначити Enum, який буде представляти різні статуси замовлень.

from enum import Enum, auto

class OrderStatus(Enum):
    NEW = auto()
    PROCESSING = auto()
    SHIPPED = auto()
    DELIVERED = auto()

# Використання auto() дозволяє автоматично призначати значення членам Enum

# Тепер створимо клас Order, який буде використовувати наш перелічуваний тип даних OrderStatus для відстеження статусу замовлення.
class Order:
    def __init__(self, name: str, status: OrderStatus):
        self.name = name
        self.status = status

    def update_status(self, new_status: OrderStatus):
        self.status = new_status
        print(f"Замовлення '{self.name}' оновлено до статусу {self.status.name}.")

    def display_status(self):
        print(f"Статус замовлення '{self.name}': {self.status.name}.")

# Тепер створимо декілька замовлень і покажемо, як можна оновити та відобразити їх статуси.
order1 = Order("Ноутбук", OrderStatus.NEW)
order2 = Order("Книга", OrderStatus.NEW)

order1.display_status()
order2.display_status()

order1.update_status(OrderStatus.PROCESSING)
order2.update_status(OrderStatus.SHIPPED)

order1.display_status()
order2.display_status()

# Зміна або додавання нових значень в Enum не впливає на решту коду, що робить зміну (рефакторінг) 
# та розширення коду простішими. Наприклад, щоб додати новий статус "Відмінений"(CANCELED), 
# ви просто розширите визначення OrderStatus таким чином: Ніяк не міняючи інший код в програмі, що вже існує.

# from enum import Enum, auto

# class OrderStatus(Enum):
#     NEW = auto()
#     PROCESSING = auto()
#     SHIPPED = auto()
#     DELIVERED = auto()
#     CANCELED = auto()

